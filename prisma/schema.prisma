// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    psychologists Psychologist?
    role          Role?
    investigationsCreated InvestigationFolder[] @relation("investigationsCreated")
    lastInvestigationsUpdated InvestigationFolder[] @relation("lastInvestigationsUpdated")
}

enum Role {
    ADMIN
    PSYCHOLOGIST
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Psychologist{
    id  Int @id @default(autoincrement())
    name String
    last_name String
    folders    InvestigationFolder[]
    userId String? @unique
    user    User?  @relation(fields: [userId], references: [id])

}

enum DocumentType {
    DICTAMEN
    INFORME
}

model InvestigationFolder {
    id              BigInt       @id @default(autoincrement())
    folio           String        @unique
    folderNumber    String
    victimName      String
    requestingMP    String
    crime           String
    unit            String
    psychologistId  Int
    psychologist    Psychologist @relation(fields: [psychologistId], references: [id])
    receivedAt      DateTime
    deliveredAt     DateTime?
    document        DocumentType?

    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    createdByUserId     String
    createdByUser       User @relation("investigationsCreated",fields: [createdByUserId], references: [id])

    lastUpdateByUserId     String
    lastUpdateByUser       User @relation("lastInvestigationsUpdated",fields: [lastUpdateByUserId], references: [id])
}
